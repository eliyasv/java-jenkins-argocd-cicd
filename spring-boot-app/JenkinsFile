pipeline {
  agent {
    docker {
      image 'ignus07/maven-java-docker:17' // Image created with maven and java installed
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access the host's Docker daemon
      // alwaysPull true   // (Optional) Always pull the latest image
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/eliyasv/java-jenkins-argocd-cicd.git'   // Checkout code from main branch (commented out since i am using scm option instead of script in Jenkins )
      }
    }
    stage('Build and Test') {
      steps {
      dir('spring-boot-app') {  // Set the working directory
         sh 'ls -ltr'           // List files for debugging
         sh 'mvn -v'            // Displays Maven version information
         sh 'mvn clean package' // Build the project and package it
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.87.35.15:9000"    // URL of the SonarQube server
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('spring-boot-app') {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'  // Run static code analysis with SonarQube
         }
       }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ignus07/jenkins-cicd:${BUILD_NUMBER}"  // Docker image name with build number as tag
        // DOCKERFILE_LOCATION = "spring-boot-app/"
        REGISTRY_CREDENTIALS = credentials('docker-cred')  // Docker registry credentials
      }
      steps {
        script {
          dir('spring-boot-app') {
            sh 'docker build -t ${DOCKER_IMAGE} .'  // Runs the Docker build command to create a Docker image with the name and tag specified by ${DOCKER_IMAGE}
          }
            def dockerImage = docker.image("${DOCKER_IMAGE}")  // Stores the built Docker image as an object called dockerImage
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }   // docker.withRegistry authenticates to Docker Hub using the provided credentials. URL specifies the default Docker Hub
                   //The dockerImage.push() command then pushes the tagged image to the Docker Hub repository using the above authentication.
        }
      }
    }
    stage('Update Deployment File') {  // This step utomates updating the Kubernetes deployment manifest with the new Docker image tag and pushes this change to the GitHub repository using stored credentials. Then Gitops tools like Argo CD can be used for deployment
        
        steps {

            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
              
            }
                sh '''
                    set -e 
                    rm -rf repo || true
                    GIT_REPO_NAME= "java-jenkins-argocd-cicd"
                    GIT_USER_NAME= "eliyasv"
                    git clone https://github.com/$GIT_USER_NAME/$GIT_REPO_NAME.git repo
                    cd repo
                    git config user.email "eliyasvarghese97@gmail.com"
                    git config user.name "eliyasv"
                    sed -i "s/replaceImageTag/$BUILD_NUMBER/g" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version $BUILD_NUMBER" || echo "No changes to commit"
                    git push https://$GITHUB_TOKEN@github.com/$GIT_USER_NAME/$GIT_REPO_NAME HEAD:main
                '''
            }
         }
  }
}
  

