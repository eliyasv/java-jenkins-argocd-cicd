pipeline {
  agent {
    docker {
      image 'ignus07/maven-java-docker:17' // image created with maven and java installed
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
      // alwaysPull true   // (Optional) Always pull the latest image
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/eliyasv/java-jenkins-argocd-cicd.git'   // Checkout code from main branch (commented out since we are using scm option instead of script in Jenkins )
      }
    }
    stage('Build and Test') {
      steps {
      dir('spring-boot-app') {
         sh 'ls -ltr'
         sh 'mvn -v'
         sh 'mvn clean package'
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://3.87.35.15:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('spring-boot-app') {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
         }
       }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ignus07/jenkins-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "spring-boot-app/"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          dir('spring-boot-app') {
            sh 'docker build -t ${DOCKER_IMAGE} .'
          }
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        
        steps {

            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
              
            }
                sh '''
                    set -e
                    rm -rf repo || true
                    git clone https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git repo
                    cd repo
                    GIT_REPO_NAME = "java-jenkins-argocd-cicd"
                    GIT_USER_NAME = "eliyasv"
                    git config user.email "eliyasvarghese97@gmail.com"
                    git config user.name "eliyasv"
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                    git add spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
         }
  }
}
  

